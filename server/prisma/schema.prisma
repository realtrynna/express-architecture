// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["interactiveTransactions"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id              Int             @id @default(autoincrement())
    email           String          @unique(map: "email") @db.VarChar(150)
    nickname        String          @db.VarChar(20)
    password        String          @db.VarChar(255)
    createdAt       DateTime        @default(now()) @map("created_at")
    updatedAt       DateTime        @default(now()) @map("updated_at")
    deletedAt       DateTime        @default(now()) @map("deleted_at")

    userMeats       UserMeta?

    posts           Post[]
    comments        Comment[]

    @@map("users")       
}

model UserMeta {
    id              Int             @id @default(autoincrement())
    introduce       String          @default("introduce.....")
    address         String          @db.VarChar(100)

    user            User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    userId          Int             @unique @map("user_id")

    @@map("user_meta")
}

model Post {
    id              Int             @id @default(autoincrement())
    title           String          @db.VarChar(100)
    content         String          @db.VarChar(255)
    imageUrl        String?         @db.VarChar(255)
    createdAt       DateTime        @default(now()) @map("created_at")
    updatedAt       DateTime        @default(now()) @map("updated_at")
    deletedAt       DateTime?       @map("deleted_at")

    user            User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    userId          Int             @unique @map("user_id")

    comments        Comment[]
    hashtags        HashtagToPost[]

    @@map("posts")
}

model Hashtag {
    id              Int             @id @default(autoincrement())
    title           String          @db.VarChar(30)

    posts           HashtagToPost[]

    @@map("hashtags")
}

model HashtagToPost {
    post            Post            @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    postId          Int
    hashtag         Hashtag         @relation(fields: [hashtagId], references: [id])
    hashtagId       Int
    
    @@id([postId, hashtagId])
}

model Comment {
    id              Int             @id @default(autoincrement())
    title           String          @db.VarChar(255)
    imageUrl        String?         @db.VarChar(255)
    createdAt       DateTime        @default(now()) @map("created_at")
    updatedAt       DateTime        @default(now()) @map("updated_at")
    deletedAt       DateTime?       @map("deleted_at")

    Post            Post            @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    postId          Int             @unique @map("post_id")

    User            User            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    userId          Int             @unique @map("user_id")

    @@map("comments")
}